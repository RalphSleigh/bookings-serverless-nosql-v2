/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserImport } from './routes/_user'
import { Route as IndexImport } from './routes/index'
import { Route as UserUserImport } from './routes/_user/user'
import { Route as UserTestLoggedInImport } from './routes/_user/testLoggedIn'
import { Route as UserEventsNewImport } from './routes/_user/events/new'
import { Route as UserEventEventIdImport } from './routes/_user/event/$eventId'
import { Route as UserEventEventIdManageImport } from './routes/_user/event/$eventId/manage'
import { Route as UserEventEventIdEditImport } from './routes/_user/event/$eventId/edit'
import { Route as UserEventEventIdManageIndexImport } from './routes/_user/event/$eventId/manage/index'
import { Route as UserEventEventIdOwnUpdateImport } from './routes/_user/event/$eventId/own/update'
import { Route as UserEventEventIdOwnBookImport } from './routes/_user/event/$eventId/own/book'
import { Route as UserEventEventIdOwnApplyImport } from './routes/_user/event/$eventId/own/apply'
import { Route as UserEventEventIdManageSettingsImport } from './routes/_user/event/$eventId/manage/settings'
import { Route as UserEventEventIdManageRolesImport } from './routes/_user/event/$eventId/manage/roles'
import { Route as UserEventEventIdManageMoneyImport } from './routes/_user/event/$eventId/manage/money'
import { Route as UserEventEventIdManageCampersImport } from './routes/_user/event/$eventId/manage/campers'
import { Route as UserEventEventIdManageBookingsImport } from './routes/_user/event/$eventId/manage/bookings'
import { Route as UserEventEventIdManageApplicationsImport } from './routes/_user/event/$eventId/manage/applications'
import { Route as UserEventEventIdBookingUserIdUpdateImport } from './routes/_user/event/$eventId/booking/$userId/update'
import { Route as UserEventEventIdManageBookingUserIdHistoryImport } from './routes/_user/event/$eventId/manage/booking/$userId/history'

// Create/Update Routes

const UserRoute = UserImport.update({
  id: '/_user',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserUserRoute = UserUserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => UserRoute,
} as any)

const UserTestLoggedInRoute = UserTestLoggedInImport.update({
  id: '/testLoggedIn',
  path: '/testLoggedIn',
  getParentRoute: () => UserRoute,
} as any)

const UserEventsNewRoute = UserEventsNewImport.update({
  id: '/events/new',
  path: '/events/new',
  getParentRoute: () => UserRoute,
} as any)

const UserEventEventIdRoute = UserEventEventIdImport.update({
  id: '/event/$eventId',
  path: '/event/$eventId',
  getParentRoute: () => UserRoute,
} as any)

const UserEventEventIdManageRoute = UserEventEventIdManageImport.update({
  id: '/manage',
  path: '/manage',
  getParentRoute: () => UserEventEventIdRoute,
} as any)

const UserEventEventIdEditRoute = UserEventEventIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => UserEventEventIdRoute,
} as any)

const UserEventEventIdManageIndexRoute =
  UserEventEventIdManageIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => UserEventEventIdManageRoute,
  } as any)

const UserEventEventIdOwnUpdateRoute = UserEventEventIdOwnUpdateImport.update({
  id: '/own/update',
  path: '/own/update',
  getParentRoute: () => UserEventEventIdRoute,
} as any)

const UserEventEventIdOwnBookRoute = UserEventEventIdOwnBookImport.update({
  id: '/own/book',
  path: '/own/book',
  getParentRoute: () => UserEventEventIdRoute,
} as any)

const UserEventEventIdOwnApplyRoute = UserEventEventIdOwnApplyImport.update({
  id: '/own/apply',
  path: '/own/apply',
  getParentRoute: () => UserEventEventIdRoute,
} as any)

const UserEventEventIdManageSettingsRoute =
  UserEventEventIdManageSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => UserEventEventIdManageRoute,
  } as any)

const UserEventEventIdManageRolesRoute =
  UserEventEventIdManageRolesImport.update({
    id: '/roles',
    path: '/roles',
    getParentRoute: () => UserEventEventIdManageRoute,
  } as any)

const UserEventEventIdManageMoneyRoute =
  UserEventEventIdManageMoneyImport.update({
    id: '/money',
    path: '/money',
    getParentRoute: () => UserEventEventIdManageRoute,
  } as any)

const UserEventEventIdManageCampersRoute =
  UserEventEventIdManageCampersImport.update({
    id: '/campers',
    path: '/campers',
    getParentRoute: () => UserEventEventIdManageRoute,
  } as any)

const UserEventEventIdManageBookingsRoute =
  UserEventEventIdManageBookingsImport.update({
    id: '/bookings',
    path: '/bookings',
    getParentRoute: () => UserEventEventIdManageRoute,
  } as any)

const UserEventEventIdManageApplicationsRoute =
  UserEventEventIdManageApplicationsImport.update({
    id: '/applications',
    path: '/applications',
    getParentRoute: () => UserEventEventIdManageRoute,
  } as any)

const UserEventEventIdBookingUserIdUpdateRoute =
  UserEventEventIdBookingUserIdUpdateImport.update({
    id: '/booking/$userId/update',
    path: '/booking/$userId/update',
    getParentRoute: () => UserEventEventIdRoute,
  } as any)

const UserEventEventIdManageBookingUserIdHistoryRoute =
  UserEventEventIdManageBookingUserIdHistoryImport.update({
    id: '/booking/$userId/history',
    path: '/booking/$userId/history',
    getParentRoute: () => UserEventEventIdManageRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/_user/testLoggedIn': {
      id: '/_user/testLoggedIn'
      path: '/testLoggedIn'
      fullPath: '/testLoggedIn'
      preLoaderRoute: typeof UserTestLoggedInImport
      parentRoute: typeof UserImport
    }
    '/_user/user': {
      id: '/_user/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserUserImport
      parentRoute: typeof UserImport
    }
    '/_user/event/$eventId': {
      id: '/_user/event/$eventId'
      path: '/event/$eventId'
      fullPath: '/event/$eventId'
      preLoaderRoute: typeof UserEventEventIdImport
      parentRoute: typeof UserImport
    }
    '/_user/events/new': {
      id: '/_user/events/new'
      path: '/events/new'
      fullPath: '/events/new'
      preLoaderRoute: typeof UserEventsNewImport
      parentRoute: typeof UserImport
    }
    '/_user/event/$eventId/edit': {
      id: '/_user/event/$eventId/edit'
      path: '/edit'
      fullPath: '/event/$eventId/edit'
      preLoaderRoute: typeof UserEventEventIdEditImport
      parentRoute: typeof UserEventEventIdImport
    }
    '/_user/event/$eventId/manage': {
      id: '/_user/event/$eventId/manage'
      path: '/manage'
      fullPath: '/event/$eventId/manage'
      preLoaderRoute: typeof UserEventEventIdManageImport
      parentRoute: typeof UserEventEventIdImport
    }
    '/_user/event/$eventId/manage/applications': {
      id: '/_user/event/$eventId/manage/applications'
      path: '/applications'
      fullPath: '/event/$eventId/manage/applications'
      preLoaderRoute: typeof UserEventEventIdManageApplicationsImport
      parentRoute: typeof UserEventEventIdManageImport
    }
    '/_user/event/$eventId/manage/bookings': {
      id: '/_user/event/$eventId/manage/bookings'
      path: '/bookings'
      fullPath: '/event/$eventId/manage/bookings'
      preLoaderRoute: typeof UserEventEventIdManageBookingsImport
      parentRoute: typeof UserEventEventIdManageImport
    }
    '/_user/event/$eventId/manage/campers': {
      id: '/_user/event/$eventId/manage/campers'
      path: '/campers'
      fullPath: '/event/$eventId/manage/campers'
      preLoaderRoute: typeof UserEventEventIdManageCampersImport
      parentRoute: typeof UserEventEventIdManageImport
    }
    '/_user/event/$eventId/manage/money': {
      id: '/_user/event/$eventId/manage/money'
      path: '/money'
      fullPath: '/event/$eventId/manage/money'
      preLoaderRoute: typeof UserEventEventIdManageMoneyImport
      parentRoute: typeof UserEventEventIdManageImport
    }
    '/_user/event/$eventId/manage/roles': {
      id: '/_user/event/$eventId/manage/roles'
      path: '/roles'
      fullPath: '/event/$eventId/manage/roles'
      preLoaderRoute: typeof UserEventEventIdManageRolesImport
      parentRoute: typeof UserEventEventIdManageImport
    }
    '/_user/event/$eventId/manage/settings': {
      id: '/_user/event/$eventId/manage/settings'
      path: '/settings'
      fullPath: '/event/$eventId/manage/settings'
      preLoaderRoute: typeof UserEventEventIdManageSettingsImport
      parentRoute: typeof UserEventEventIdManageImport
    }
    '/_user/event/$eventId/own/apply': {
      id: '/_user/event/$eventId/own/apply'
      path: '/own/apply'
      fullPath: '/event/$eventId/own/apply'
      preLoaderRoute: typeof UserEventEventIdOwnApplyImport
      parentRoute: typeof UserEventEventIdImport
    }
    '/_user/event/$eventId/own/book': {
      id: '/_user/event/$eventId/own/book'
      path: '/own/book'
      fullPath: '/event/$eventId/own/book'
      preLoaderRoute: typeof UserEventEventIdOwnBookImport
      parentRoute: typeof UserEventEventIdImport
    }
    '/_user/event/$eventId/own/update': {
      id: '/_user/event/$eventId/own/update'
      path: '/own/update'
      fullPath: '/event/$eventId/own/update'
      preLoaderRoute: typeof UserEventEventIdOwnUpdateImport
      parentRoute: typeof UserEventEventIdImport
    }
    '/_user/event/$eventId/manage/': {
      id: '/_user/event/$eventId/manage/'
      path: '/'
      fullPath: '/event/$eventId/manage/'
      preLoaderRoute: typeof UserEventEventIdManageIndexImport
      parentRoute: typeof UserEventEventIdManageImport
    }
    '/_user/event/$eventId/booking/$userId/update': {
      id: '/_user/event/$eventId/booking/$userId/update'
      path: '/booking/$userId/update'
      fullPath: '/event/$eventId/booking/$userId/update'
      preLoaderRoute: typeof UserEventEventIdBookingUserIdUpdateImport
      parentRoute: typeof UserEventEventIdImport
    }
    '/_user/event/$eventId/manage/booking/$userId/history': {
      id: '/_user/event/$eventId/manage/booking/$userId/history'
      path: '/booking/$userId/history'
      fullPath: '/event/$eventId/manage/booking/$userId/history'
      preLoaderRoute: typeof UserEventEventIdManageBookingUserIdHistoryImport
      parentRoute: typeof UserEventEventIdManageImport
    }
  }
}

// Create and export the route tree

interface UserEventEventIdManageRouteChildren {
  UserEventEventIdManageApplicationsRoute: typeof UserEventEventIdManageApplicationsRoute
  UserEventEventIdManageBookingsRoute: typeof UserEventEventIdManageBookingsRoute
  UserEventEventIdManageCampersRoute: typeof UserEventEventIdManageCampersRoute
  UserEventEventIdManageMoneyRoute: typeof UserEventEventIdManageMoneyRoute
  UserEventEventIdManageRolesRoute: typeof UserEventEventIdManageRolesRoute
  UserEventEventIdManageSettingsRoute: typeof UserEventEventIdManageSettingsRoute
  UserEventEventIdManageIndexRoute: typeof UserEventEventIdManageIndexRoute
  UserEventEventIdManageBookingUserIdHistoryRoute: typeof UserEventEventIdManageBookingUserIdHistoryRoute
}

const UserEventEventIdManageRouteChildren: UserEventEventIdManageRouteChildren =
  {
    UserEventEventIdManageApplicationsRoute:
      UserEventEventIdManageApplicationsRoute,
    UserEventEventIdManageBookingsRoute: UserEventEventIdManageBookingsRoute,
    UserEventEventIdManageCampersRoute: UserEventEventIdManageCampersRoute,
    UserEventEventIdManageMoneyRoute: UserEventEventIdManageMoneyRoute,
    UserEventEventIdManageRolesRoute: UserEventEventIdManageRolesRoute,
    UserEventEventIdManageSettingsRoute: UserEventEventIdManageSettingsRoute,
    UserEventEventIdManageIndexRoute: UserEventEventIdManageIndexRoute,
    UserEventEventIdManageBookingUserIdHistoryRoute:
      UserEventEventIdManageBookingUserIdHistoryRoute,
  }

const UserEventEventIdManageRouteWithChildren =
  UserEventEventIdManageRoute._addFileChildren(
    UserEventEventIdManageRouteChildren,
  )

interface UserEventEventIdRouteChildren {
  UserEventEventIdEditRoute: typeof UserEventEventIdEditRoute
  UserEventEventIdManageRoute: typeof UserEventEventIdManageRouteWithChildren
  UserEventEventIdOwnApplyRoute: typeof UserEventEventIdOwnApplyRoute
  UserEventEventIdOwnBookRoute: typeof UserEventEventIdOwnBookRoute
  UserEventEventIdOwnUpdateRoute: typeof UserEventEventIdOwnUpdateRoute
  UserEventEventIdBookingUserIdUpdateRoute: typeof UserEventEventIdBookingUserIdUpdateRoute
}

const UserEventEventIdRouteChildren: UserEventEventIdRouteChildren = {
  UserEventEventIdEditRoute: UserEventEventIdEditRoute,
  UserEventEventIdManageRoute: UserEventEventIdManageRouteWithChildren,
  UserEventEventIdOwnApplyRoute: UserEventEventIdOwnApplyRoute,
  UserEventEventIdOwnBookRoute: UserEventEventIdOwnBookRoute,
  UserEventEventIdOwnUpdateRoute: UserEventEventIdOwnUpdateRoute,
  UserEventEventIdBookingUserIdUpdateRoute:
    UserEventEventIdBookingUserIdUpdateRoute,
}

const UserEventEventIdRouteWithChildren =
  UserEventEventIdRoute._addFileChildren(UserEventEventIdRouteChildren)

interface UserRouteChildren {
  UserTestLoggedInRoute: typeof UserTestLoggedInRoute
  UserUserRoute: typeof UserUserRoute
  UserEventEventIdRoute: typeof UserEventEventIdRouteWithChildren
  UserEventsNewRoute: typeof UserEventsNewRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserTestLoggedInRoute: UserTestLoggedInRoute,
  UserUserRoute: UserUserRoute,
  UserEventEventIdRoute: UserEventEventIdRouteWithChildren,
  UserEventsNewRoute: UserEventsNewRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof UserRouteWithChildren
  '/testLoggedIn': typeof UserTestLoggedInRoute
  '/user': typeof UserUserRoute
  '/event/$eventId': typeof UserEventEventIdRouteWithChildren
  '/events/new': typeof UserEventsNewRoute
  '/event/$eventId/edit': typeof UserEventEventIdEditRoute
  '/event/$eventId/manage': typeof UserEventEventIdManageRouteWithChildren
  '/event/$eventId/manage/applications': typeof UserEventEventIdManageApplicationsRoute
  '/event/$eventId/manage/bookings': typeof UserEventEventIdManageBookingsRoute
  '/event/$eventId/manage/campers': typeof UserEventEventIdManageCampersRoute
  '/event/$eventId/manage/money': typeof UserEventEventIdManageMoneyRoute
  '/event/$eventId/manage/roles': typeof UserEventEventIdManageRolesRoute
  '/event/$eventId/manage/settings': typeof UserEventEventIdManageSettingsRoute
  '/event/$eventId/own/apply': typeof UserEventEventIdOwnApplyRoute
  '/event/$eventId/own/book': typeof UserEventEventIdOwnBookRoute
  '/event/$eventId/own/update': typeof UserEventEventIdOwnUpdateRoute
  '/event/$eventId/manage/': typeof UserEventEventIdManageIndexRoute
  '/event/$eventId/booking/$userId/update': typeof UserEventEventIdBookingUserIdUpdateRoute
  '/event/$eventId/manage/booking/$userId/history': typeof UserEventEventIdManageBookingUserIdHistoryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof UserRouteWithChildren
  '/testLoggedIn': typeof UserTestLoggedInRoute
  '/user': typeof UserUserRoute
  '/event/$eventId': typeof UserEventEventIdRouteWithChildren
  '/events/new': typeof UserEventsNewRoute
  '/event/$eventId/edit': typeof UserEventEventIdEditRoute
  '/event/$eventId/manage/applications': typeof UserEventEventIdManageApplicationsRoute
  '/event/$eventId/manage/bookings': typeof UserEventEventIdManageBookingsRoute
  '/event/$eventId/manage/campers': typeof UserEventEventIdManageCampersRoute
  '/event/$eventId/manage/money': typeof UserEventEventIdManageMoneyRoute
  '/event/$eventId/manage/roles': typeof UserEventEventIdManageRolesRoute
  '/event/$eventId/manage/settings': typeof UserEventEventIdManageSettingsRoute
  '/event/$eventId/own/apply': typeof UserEventEventIdOwnApplyRoute
  '/event/$eventId/own/book': typeof UserEventEventIdOwnBookRoute
  '/event/$eventId/own/update': typeof UserEventEventIdOwnUpdateRoute
  '/event/$eventId/manage': typeof UserEventEventIdManageIndexRoute
  '/event/$eventId/booking/$userId/update': typeof UserEventEventIdBookingUserIdUpdateRoute
  '/event/$eventId/manage/booking/$userId/history': typeof UserEventEventIdManageBookingUserIdHistoryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_user': typeof UserRouteWithChildren
  '/_user/testLoggedIn': typeof UserTestLoggedInRoute
  '/_user/user': typeof UserUserRoute
  '/_user/event/$eventId': typeof UserEventEventIdRouteWithChildren
  '/_user/events/new': typeof UserEventsNewRoute
  '/_user/event/$eventId/edit': typeof UserEventEventIdEditRoute
  '/_user/event/$eventId/manage': typeof UserEventEventIdManageRouteWithChildren
  '/_user/event/$eventId/manage/applications': typeof UserEventEventIdManageApplicationsRoute
  '/_user/event/$eventId/manage/bookings': typeof UserEventEventIdManageBookingsRoute
  '/_user/event/$eventId/manage/campers': typeof UserEventEventIdManageCampersRoute
  '/_user/event/$eventId/manage/money': typeof UserEventEventIdManageMoneyRoute
  '/_user/event/$eventId/manage/roles': typeof UserEventEventIdManageRolesRoute
  '/_user/event/$eventId/manage/settings': typeof UserEventEventIdManageSettingsRoute
  '/_user/event/$eventId/own/apply': typeof UserEventEventIdOwnApplyRoute
  '/_user/event/$eventId/own/book': typeof UserEventEventIdOwnBookRoute
  '/_user/event/$eventId/own/update': typeof UserEventEventIdOwnUpdateRoute
  '/_user/event/$eventId/manage/': typeof UserEventEventIdManageIndexRoute
  '/_user/event/$eventId/booking/$userId/update': typeof UserEventEventIdBookingUserIdUpdateRoute
  '/_user/event/$eventId/manage/booking/$userId/history': typeof UserEventEventIdManageBookingUserIdHistoryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/testLoggedIn'
    | '/user'
    | '/event/$eventId'
    | '/events/new'
    | '/event/$eventId/edit'
    | '/event/$eventId/manage'
    | '/event/$eventId/manage/applications'
    | '/event/$eventId/manage/bookings'
    | '/event/$eventId/manage/campers'
    | '/event/$eventId/manage/money'
    | '/event/$eventId/manage/roles'
    | '/event/$eventId/manage/settings'
    | '/event/$eventId/own/apply'
    | '/event/$eventId/own/book'
    | '/event/$eventId/own/update'
    | '/event/$eventId/manage/'
    | '/event/$eventId/booking/$userId/update'
    | '/event/$eventId/manage/booking/$userId/history'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/testLoggedIn'
    | '/user'
    | '/event/$eventId'
    | '/events/new'
    | '/event/$eventId/edit'
    | '/event/$eventId/manage/applications'
    | '/event/$eventId/manage/bookings'
    | '/event/$eventId/manage/campers'
    | '/event/$eventId/manage/money'
    | '/event/$eventId/manage/roles'
    | '/event/$eventId/manage/settings'
    | '/event/$eventId/own/apply'
    | '/event/$eventId/own/book'
    | '/event/$eventId/own/update'
    | '/event/$eventId/manage'
    | '/event/$eventId/booking/$userId/update'
    | '/event/$eventId/manage/booking/$userId/history'
  id:
    | '__root__'
    | '/'
    | '/_user'
    | '/_user/testLoggedIn'
    | '/_user/user'
    | '/_user/event/$eventId'
    | '/_user/events/new'
    | '/_user/event/$eventId/edit'
    | '/_user/event/$eventId/manage'
    | '/_user/event/$eventId/manage/applications'
    | '/_user/event/$eventId/manage/bookings'
    | '/_user/event/$eventId/manage/campers'
    | '/_user/event/$eventId/manage/money'
    | '/_user/event/$eventId/manage/roles'
    | '/_user/event/$eventId/manage/settings'
    | '/_user/event/$eventId/own/apply'
    | '/_user/event/$eventId/own/book'
    | '/_user/event/$eventId/own/update'
    | '/_user/event/$eventId/manage/'
    | '/_user/event/$eventId/booking/$userId/update'
    | '/_user/event/$eventId/manage/booking/$userId/history'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UserRoute: typeof UserRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UserRoute: UserRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_user"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_user": {
      "filePath": "_user.tsx",
      "children": [
        "/_user/testLoggedIn",
        "/_user/user",
        "/_user/event/$eventId",
        "/_user/events/new"
      ]
    },
    "/_user/testLoggedIn": {
      "filePath": "_user/testLoggedIn.tsx",
      "parent": "/_user"
    },
    "/_user/user": {
      "filePath": "_user/user.tsx",
      "parent": "/_user"
    },
    "/_user/event/$eventId": {
      "filePath": "_user/event/$eventId.tsx",
      "parent": "/_user",
      "children": [
        "/_user/event/$eventId/edit",
        "/_user/event/$eventId/manage",
        "/_user/event/$eventId/own/apply",
        "/_user/event/$eventId/own/book",
        "/_user/event/$eventId/own/update",
        "/_user/event/$eventId/booking/$userId/update"
      ]
    },
    "/_user/events/new": {
      "filePath": "_user/events/new.tsx",
      "parent": "/_user"
    },
    "/_user/event/$eventId/edit": {
      "filePath": "_user/event/$eventId/edit.tsx",
      "parent": "/_user/event/$eventId"
    },
    "/_user/event/$eventId/manage": {
      "filePath": "_user/event/$eventId/manage.tsx",
      "parent": "/_user/event/$eventId",
      "children": [
        "/_user/event/$eventId/manage/applications",
        "/_user/event/$eventId/manage/bookings",
        "/_user/event/$eventId/manage/campers",
        "/_user/event/$eventId/manage/money",
        "/_user/event/$eventId/manage/roles",
        "/_user/event/$eventId/manage/settings",
        "/_user/event/$eventId/manage/",
        "/_user/event/$eventId/manage/booking/$userId/history"
      ]
    },
    "/_user/event/$eventId/manage/applications": {
      "filePath": "_user/event/$eventId/manage/applications.tsx",
      "parent": "/_user/event/$eventId/manage"
    },
    "/_user/event/$eventId/manage/bookings": {
      "filePath": "_user/event/$eventId/manage/bookings.tsx",
      "parent": "/_user/event/$eventId/manage"
    },
    "/_user/event/$eventId/manage/campers": {
      "filePath": "_user/event/$eventId/manage/campers.tsx",
      "parent": "/_user/event/$eventId/manage"
    },
    "/_user/event/$eventId/manage/money": {
      "filePath": "_user/event/$eventId/manage/money.tsx",
      "parent": "/_user/event/$eventId/manage"
    },
    "/_user/event/$eventId/manage/roles": {
      "filePath": "_user/event/$eventId/manage/roles.tsx",
      "parent": "/_user/event/$eventId/manage"
    },
    "/_user/event/$eventId/manage/settings": {
      "filePath": "_user/event/$eventId/manage/settings.tsx",
      "parent": "/_user/event/$eventId/manage"
    },
    "/_user/event/$eventId/own/apply": {
      "filePath": "_user/event/$eventId/own/apply.tsx",
      "parent": "/_user/event/$eventId"
    },
    "/_user/event/$eventId/own/book": {
      "filePath": "_user/event/$eventId/own/book.tsx",
      "parent": "/_user/event/$eventId"
    },
    "/_user/event/$eventId/own/update": {
      "filePath": "_user/event/$eventId/own/update.tsx",
      "parent": "/_user/event/$eventId"
    },
    "/_user/event/$eventId/manage/": {
      "filePath": "_user/event/$eventId/manage/index.tsx",
      "parent": "/_user/event/$eventId/manage"
    },
    "/_user/event/$eventId/booking/$userId/update": {
      "filePath": "_user/event/$eventId/booking/$userId/update.tsx",
      "parent": "/_user/event/$eventId"
    },
    "/_user/event/$eventId/manage/booking/$userId/history": {
      "filePath": "_user/event/$eventId/manage/booking/$userId/history.tsx",
      "parent": "/_user/event/$eventId/manage"
    }
  }
}
ROUTE_MANIFEST_END */
