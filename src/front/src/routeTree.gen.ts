/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserImport } from './routes/_user'
import { Route as IndexImport } from './routes/index'
import { Route as UserUserImport } from './routes/_user/user'
import { Route as UserTestLoggedInImport } from './routes/_user/testLoggedIn'
import { Route as UserEventsNewImport } from './routes/_user/events/new'
import { Route as UserEventEventIdEditImport } from './routes/_user/event/$eventId/edit'
import { Route as UserEventEventIdOwnUpdateImport } from './routes/_user/event/$eventId/own/update'
import { Route as UserEventEventIdOwnBookImport } from './routes/_user/event/$eventId/own/book'

// Create/Update Routes

const UserRoute = UserImport.update({
  id: '/_user',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserUserRoute = UserUserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => UserRoute,
} as any)

const UserTestLoggedInRoute = UserTestLoggedInImport.update({
  id: '/testLoggedIn',
  path: '/testLoggedIn',
  getParentRoute: () => UserRoute,
} as any)

const UserEventsNewRoute = UserEventsNewImport.update({
  id: '/events/new',
  path: '/events/new',
  getParentRoute: () => UserRoute,
} as any)

const UserEventEventIdEditRoute = UserEventEventIdEditImport.update({
  id: '/event/$eventId/edit',
  path: '/event/$eventId/edit',
  getParentRoute: () => UserRoute,
} as any)

const UserEventEventIdOwnUpdateRoute = UserEventEventIdOwnUpdateImport.update({
  id: '/event/$eventId/own/update',
  path: '/event/$eventId/own/update',
  getParentRoute: () => UserRoute,
} as any)

const UserEventEventIdOwnBookRoute = UserEventEventIdOwnBookImport.update({
  id: '/event/$eventId/own/book',
  path: '/event/$eventId/own/book',
  getParentRoute: () => UserRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/_user/testLoggedIn': {
      id: '/_user/testLoggedIn'
      path: '/testLoggedIn'
      fullPath: '/testLoggedIn'
      preLoaderRoute: typeof UserTestLoggedInImport
      parentRoute: typeof UserImport
    }
    '/_user/user': {
      id: '/_user/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserUserImport
      parentRoute: typeof UserImport
    }
    '/_user/events/new': {
      id: '/_user/events/new'
      path: '/events/new'
      fullPath: '/events/new'
      preLoaderRoute: typeof UserEventsNewImport
      parentRoute: typeof UserImport
    }
    '/_user/event/$eventId/edit': {
      id: '/_user/event/$eventId/edit'
      path: '/event/$eventId/edit'
      fullPath: '/event/$eventId/edit'
      preLoaderRoute: typeof UserEventEventIdEditImport
      parentRoute: typeof UserImport
    }
    '/_user/event/$eventId/own/book': {
      id: '/_user/event/$eventId/own/book'
      path: '/event/$eventId/own/book'
      fullPath: '/event/$eventId/own/book'
      preLoaderRoute: typeof UserEventEventIdOwnBookImport
      parentRoute: typeof UserImport
    }
    '/_user/event/$eventId/own/update': {
      id: '/_user/event/$eventId/own/update'
      path: '/event/$eventId/own/update'
      fullPath: '/event/$eventId/own/update'
      preLoaderRoute: typeof UserEventEventIdOwnUpdateImport
      parentRoute: typeof UserImport
    }
  }
}

// Create and export the route tree

interface UserRouteChildren {
  UserTestLoggedInRoute: typeof UserTestLoggedInRoute
  UserUserRoute: typeof UserUserRoute
  UserEventsNewRoute: typeof UserEventsNewRoute
  UserEventEventIdEditRoute: typeof UserEventEventIdEditRoute
  UserEventEventIdOwnBookRoute: typeof UserEventEventIdOwnBookRoute
  UserEventEventIdOwnUpdateRoute: typeof UserEventEventIdOwnUpdateRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserTestLoggedInRoute: UserTestLoggedInRoute,
  UserUserRoute: UserUserRoute,
  UserEventsNewRoute: UserEventsNewRoute,
  UserEventEventIdEditRoute: UserEventEventIdEditRoute,
  UserEventEventIdOwnBookRoute: UserEventEventIdOwnBookRoute,
  UserEventEventIdOwnUpdateRoute: UserEventEventIdOwnUpdateRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof UserRouteWithChildren
  '/testLoggedIn': typeof UserTestLoggedInRoute
  '/user': typeof UserUserRoute
  '/events/new': typeof UserEventsNewRoute
  '/event/$eventId/edit': typeof UserEventEventIdEditRoute
  '/event/$eventId/own/book': typeof UserEventEventIdOwnBookRoute
  '/event/$eventId/own/update': typeof UserEventEventIdOwnUpdateRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof UserRouteWithChildren
  '/testLoggedIn': typeof UserTestLoggedInRoute
  '/user': typeof UserUserRoute
  '/events/new': typeof UserEventsNewRoute
  '/event/$eventId/edit': typeof UserEventEventIdEditRoute
  '/event/$eventId/own/book': typeof UserEventEventIdOwnBookRoute
  '/event/$eventId/own/update': typeof UserEventEventIdOwnUpdateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_user': typeof UserRouteWithChildren
  '/_user/testLoggedIn': typeof UserTestLoggedInRoute
  '/_user/user': typeof UserUserRoute
  '/_user/events/new': typeof UserEventsNewRoute
  '/_user/event/$eventId/edit': typeof UserEventEventIdEditRoute
  '/_user/event/$eventId/own/book': typeof UserEventEventIdOwnBookRoute
  '/_user/event/$eventId/own/update': typeof UserEventEventIdOwnUpdateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/testLoggedIn'
    | '/user'
    | '/events/new'
    | '/event/$eventId/edit'
    | '/event/$eventId/own/book'
    | '/event/$eventId/own/update'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/testLoggedIn'
    | '/user'
    | '/events/new'
    | '/event/$eventId/edit'
    | '/event/$eventId/own/book'
    | '/event/$eventId/own/update'
  id:
    | '__root__'
    | '/'
    | '/_user'
    | '/_user/testLoggedIn'
    | '/_user/user'
    | '/_user/events/new'
    | '/_user/event/$eventId/edit'
    | '/_user/event/$eventId/own/book'
    | '/_user/event/$eventId/own/update'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UserRoute: typeof UserRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UserRoute: UserRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_user"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_user": {
      "filePath": "_user.tsx",
      "children": [
        "/_user/testLoggedIn",
        "/_user/user",
        "/_user/events/new",
        "/_user/event/$eventId/edit",
        "/_user/event/$eventId/own/book",
        "/_user/event/$eventId/own/update"
      ]
    },
    "/_user/testLoggedIn": {
      "filePath": "_user/testLoggedIn.tsx",
      "parent": "/_user"
    },
    "/_user/user": {
      "filePath": "_user/user.tsx",
      "parent": "/_user"
    },
    "/_user/events/new": {
      "filePath": "_user/events/new.tsx",
      "parent": "/_user"
    },
    "/_user/event/$eventId/edit": {
      "filePath": "_user/event/$eventId/edit.tsx",
      "parent": "/_user"
    },
    "/_user/event/$eventId/own/book": {
      "filePath": "_user/event/$eventId/own/book.tsx",
      "parent": "/_user"
    },
    "/_user/event/$eventId/own/update": {
      "filePath": "_user/event/$eventId/own/update.tsx",
      "parent": "/_user"
    }
  }
}
ROUTE_MANIFEST_END */
