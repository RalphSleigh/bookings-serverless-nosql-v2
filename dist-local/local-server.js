// src/local-server.ts
import { wrapLambda } from "convert-lambda-to-express";
import express from "express";

// src/lambda/handler.ts
import middy2 from "@middy/core";
import httpRouterHandler from "@middy/http-router";

// src/lambda/utils.ts
import middy from "@middy/core";
function am_in_lambda() {
  return process.env.LOCAL_SERVER !== "true";
}
var HandlerWrapper = (fn) => {
  return middy(async (event, context) => {
    const result = await fn(event, context);
    return {
      statusCode: 200,
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(result)
    };
  });
};

// src/lambda/endpoints/env.ts
var getEnv = HandlerWrapper(async (event, context) => {
  return { "env": context.config.ENV };
});

// src/lambda/config.ts
import { DynamoDBClient, GetItemCommand } from "@aws-sdk/client-dynamodb";
import { unmarshall } from "@aws-sdk/util-dynamodb";
var configData;
var configMiddleware = () => {
  const before = async (request) => {
    try {
      if (!configData) {
        const dynamodbClientOptions = am_in_lambda() ? { region: "eu-west-2" } : { region: "eu-west-2", endpoint: "http://localhost:8000" };
        const client = new DynamoDBClient(dynamodbClientOptions);
        const input = {
          "Key": {
            "pk": {
              "S": "CONFIG"
            },
            "key": {
              "S": "CURRENT"
            }
          },
          "TableName": "Config"
        };
        const command = new GetItemCommand(input);
        const data = await client.send(command);
        configData = unmarshall(data.Item);
      }
      request.context.config = configData;
    } catch (error) {
      console.log(error);
      throw error;
    } finally {
    }
  };
  return {
    before
  };
};

// src/lambda/handler.ts
import httpHeaderNormalizer from "@middy/http-header-normalizer";
import httpJsonBodyParser from "@middy/http-json-body-parser";
var routes = [
  {
    method: "GET",
    path: "/api/env",
    handler: getEnv
  }
];
var handler = middy2().use(httpHeaderNormalizer()).use(httpJsonBodyParser({ disableContentTypeError: true })).use(configMiddleware()).handler(httpRouterHandler(routes));

// src/local-server.ts
var app = express();
app.get("*", wrapLambda(handler, { region: "eu-west-2" }));
app.post("*", wrapLambda(handler, { region: "eu-west-2" }));
app.listen(8080, () => {
  console.log("Listening on port 8080");
});
//# sourceMappingURL=data:application/json;base64,
